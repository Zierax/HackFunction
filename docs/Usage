Guide to Using hackit.infoga Library for Information Gathering

1. Ping Scan
Perform a ping scan to check if a host is alive.
```
from hackit.infoga import ping
target = "example.com"
ping(target)
```


2. Trace Route
Perform a trace route to a target host.
```
from hackit.infoga import trcrouter
target = "example.com"
trcrouter(target)
```


3. Reverse DNS Lookup
Perform a reverse DNS lookup for an IP address.
```
from hackit.infoga import reversedns
target = "8.8.8.8"
reversedns(target)
```


4. GeoIP Lookup
Perform a GeoIP lookup for an IP address or domain.
```
from hackit.infoga import geoip
target = "example.com"
geoip(target)
```


5. Reverse IP Lookup
Perform a reverse IP lookup to find domains hosted on the same IP address.
```
from hackit.infoga import reverseiplookup
target = "example.com"
reverseiplookup(target)
```


6. WHOIS Lookup
Perform a WHOIS lookup for a domain.
```
from hackit.infoga import whois
target = "example.com"
whois(target)
```


7. waybackurls
Extract all links from a webpage.
```
from hackit.infoga import waybackurls
target = "https://example.com"
pagelinks(target)
```


8. DNS Lookup
Perform a DNS lookup for a domain.
```
from hackit.infoga import dnslookup
target = "example.com"
dnslookup(target)
```


9. Nmap Scan
Perform various types of Nmap scans using the nmap_scan function. Below is an example of a TCP SYN scan.
```
from hackfunc import nmap_scan

nmap_target = "scanme.nmap.org"
scan_types = ["TCP_SYN_SCAN"]
nmap_results = nmap_scan(nmap_target, scan_types=scan_types)
for result in nmap_results:
    print(f"Host: {result['host']} | Port: {result['port']} | Service: {result['name']} | State: {result['state']}")

```




Guide to Using hackit.vulb Library for Vulnability Checks

1. SQL Injection Check
```
from hackit.vuln import vuln
vuln_scanner = vuln()
target_url = "http://example.com/page?id=1"
vuln_scanner.sql_check(target_url)
```


2. Cross-Site Scripting (XSS) Check
```
from hackit.vuln import vuln
vuln_scanner = vuln()
target_url = "http://example.com/comment"
vuln_scanner.xss_check(target_url)
```


3. Remote Code Execution (RCE) Check
```
from hackit.vuln import vuln
vuln_scanner = vuln()
target_url = "http://example.com/admin"
vuln_scanner.rce_check(target_url)
```


```
from hackit.vuln import vuln
vuln_scanner = vuln()
target_url = "http://example.com/login"
vuln_scanner.csrf_token_check(target_url)
```


5. Clickjacking Protection Check
```
from hackit.vuln import vuln
vuln_scanner = vuln()

target_url = "http://example.com"
vuln_scanner.clickjacking_check(target_url)
```



Additional Utility Functions
You can also utilize various utility functions provided by vuln for tasks such as generating random strings, hashing strings, encoding/decoding base64, working with URLs, parsing HTML forms, checking HTTP methods, and generating random User-Agent strings. Here are some examples:

```
from hackit.vuln import vuln

# Create an instance of vuln
vuln_scanner = vuln()

# Generate a random string
random_string = vuln_scanner.generate_random_string(length=8)

# Hash a string (default is SHA-256)
hashed_string = vuln_scanner.hash_string("password123", algorithm='md5')

# Encode and decode base64
encoded_data = vuln_scanner.encode_base64("Hello, World!")
decoded_data = vuln_scanner.decode_base64(encoded_data)

# Encode and decode URLs
encoded_url = vuln_scanner.encode_url("https://example.com/path?key=value")
decoded_url = vuln_scanner.decode_url(encoded_url)

# Parse and build URLs
parsed_url = vuln_scanner.parse_url("https://example.com/path?key=value")
built_url = vuln_scanner.build_url("https://example.com", path="resource")

# Parse HTML forms
html_content = "<form action='/submit' method='post'><input type='text' name='username'></form>"
parsed_forms = vuln_scanner.parse_html_form(html_content)

# Check HTTP methods allowed
target_url = "https://example.com/api"
vuln_scanner.check_http_methods(target_url, allowed_methods=['GET', 'POST'])

# Generate a random User-Agent string
random_user_agent = vuln_scanner.generate_random_user_agent()
```
